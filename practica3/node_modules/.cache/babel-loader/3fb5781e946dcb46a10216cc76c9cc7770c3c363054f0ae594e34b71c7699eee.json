{"ast":null,"code":"import axios from 'axios';\n\n// URL base de la API (puedes cambiarla según la API que elijas usar)\nconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes';\n\n/**\r\n * Función para buscar libros por una palabra clave.\r\n * @param {string} query - Palabra clave para buscar libros.\r\n * @returns {Promise<Array>} - Lista de libros encontrados.\r\n */\nexport const fetchBooks = async query => {\n  try {\n    // Realiza una solicitud GET a la API\n    const response = await axios.get(BASE_URL, {\n      params: {\n        q: query,\n        // La consulta de búsqueda\n        maxResults: 10 // Limitar el número de resultados\n      }\n    });\n\n    // Procesa los resultados para devolver solo la información necesaria\n    const books = response.data.items.map(item => {\n      var _item$volumeInfo$imag;\n      return {\n        id: item.id,\n        title: item.volumeInfo.title || 'Título no disponible',\n        authors: item.volumeInfo.authors || ['Autor no disponible'],\n        thumbnail: ((_item$volumeInfo$imag = item.volumeInfo.imageLinks) === null || _item$volumeInfo$imag === void 0 ? void 0 : _item$volumeInfo$imag.thumbnail) || ''\n      };\n    });\n    return books;\n  } catch (error) {\n    console.error('Error al buscar libros:', error);\n    return []; // Devuelve un array vacío en caso de error\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","fetchBooks","query","response","get","params","q","maxResults","books","data","items","map","item","_item$volumeInfo$imag","id","title","volumeInfo","authors","thumbnail","imageLinks","error","console"],"sources":["D:/Universidad/2024-2025/PADM/Prac3/PAD24-25-P3/practica3/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// URL base de la API (puedes cambiarla según la API que elijas usar)\r\nconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\n/**\r\n * Función para buscar libros por una palabra clave.\r\n * @param {string} query - Palabra clave para buscar libros.\r\n * @returns {Promise<Array>} - Lista de libros encontrados.\r\n */\r\nexport const fetchBooks = async (query) => {\r\n  try {\r\n    // Realiza una solicitud GET a la API\r\n    const response = await axios.get(BASE_URL, {\r\n      params: {\r\n        q: query, // La consulta de búsqueda\r\n        maxResults: 10, // Limitar el número de resultados\r\n      },\r\n    });\r\n\r\n    // Procesa los resultados para devolver solo la información necesaria\r\n    const books = response.data.items.map((item) => ({\r\n      id: item.id,\r\n      title: item.volumeInfo.title || 'Título no disponible',\r\n      authors: item.volumeInfo.authors || ['Autor no disponible'],\r\n      thumbnail: item.volumeInfo.imageLinks?.thumbnail || '',\r\n    }));\r\n\r\n    return books;\r\n  } catch (error) {\r\n    console.error('Error al buscar libros:', error);\r\n    return []; // Devuelve un array vacío en caso de error\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG,6CAA6C;;AAE9D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,KAAK,IAAK;EACzC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,QAAQ,EAAE;MACzCK,MAAM,EAAE;QACNC,CAAC,EAAEJ,KAAK;QAAE;QACVK,UAAU,EAAE,EAAE,CAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,KAAK,GAAGL,QAAQ,CAACM,IAAI,CAACC,KAAK,CAACC,GAAG,CAAEC,IAAI;MAAA,IAAAC,qBAAA;MAAA,OAAM;QAC/CC,EAAE,EAAEF,IAAI,CAACE,EAAE;QACXC,KAAK,EAAEH,IAAI,CAACI,UAAU,CAACD,KAAK,IAAI,sBAAsB;QACtDE,OAAO,EAAEL,IAAI,CAACI,UAAU,CAACC,OAAO,IAAI,CAAC,qBAAqB,CAAC;QAC3DC,SAAS,EAAE,EAAAL,qBAAA,GAAAD,IAAI,CAACI,UAAU,CAACG,UAAU,cAAAN,qBAAA,uBAA1BA,qBAAA,CAA4BK,SAAS,KAAI;MACtD,CAAC;IAAA,CAAC,CAAC;IAEH,OAAOV,KAAK;EACd,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}